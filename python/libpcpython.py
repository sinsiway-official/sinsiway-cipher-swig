# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libpcpython
else:
    import _libpcpython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)

def _PetraIsOk(data):
    if data == 'PcAPI_ERR_INVALID_SID':
        raise Exception(data + ', Check the petra_cipher_api.log file for detailed errors.')
    elif data == 'PcAPI_ERR_ENCRYPT_FAILED':
        raise Exception(data + ', Check the petra_cipher_api.log file for detailed errors.')
    elif data == 'PcAPI_ERR_DECRYPT_FAILED':
        raise Exception(data + ', Check the petra_cipher_api.log file for detailed errors.')
    else:
        return data

def PcAPI_initialize(info_file_path, credentials_pw):
    return _libpcpython.PcAPI_initialize(info_file_path, credentials_pw)

def PcAPI_getSession(client_ip):
    return _libpcpython.PcAPI_getSession(client_ip)

def PcAPI_logCurrRequest(api_sid, sql_type, api_program, api_userid):
    return _libpcpython.PcAPI_logCurrRequest(api_sid, sql_type, api_program, api_userid)

def PcAPI_encrypt_with_id_l(api_sid, enc_col_id, src, src_len, sql_type):
    return _PetraIsOk(_libpcpython.PcAPI_encrypt_with_id_l(api_sid, enc_col_id, src, src_len, sql_type))

def PcAPI_encrypt_with_name_l(api_sid, enc_col_name, src, src_len, sql_type):
    return _PetraIsOk(_libpcpython.PcAPI_encrypt_with_name_l(api_sid, enc_col_name, src, src_len, sql_type))

def PcAPI_decrypt_with_id_l(api_sid, enc_col_id, src, src_len, sql_type):
    return _PetraIsOk(_libpcpython.PcAPI_decrypt_with_id_l(api_sid, enc_col_id, src, src_len, sql_type))

def PcAPI_decrypt_with_name_l(api_sid, enc_col_name, src, src_len, sql_type):
    return _PetraIsOk(_libpcpython.PcAPI_decrypt_with_name_l(api_sid, enc_col_name, src, src_len, sql_type))



